---
import Layout from '../layouts/Layout.astro';
---

<Layout title="PowerBI-Style Analytics - PowerReview">
  <main>
    <div class="analytics-header">
      <div class="header-content">
        <h1>Advanced Security Analytics</h1>
        <p>Interactive data visualization with drill-down capabilities</p>
      </div>
      <div class="header-actions">
        <button class="btn-refresh" onclick="refreshAllData()">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23 4 23 10 17 10"/>
            <polyline points="1 20 1 14 7 14"/>
            <path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"/>
          </svg>
          Refresh
        </button>
        <button class="btn-export" onclick="showExportOptions()">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"/>
            <polyline points="7 11 12 16 17 11"/>
            <line x1="12" y1="4" x2="12" y2="16"/>
          </svg>
          Export
        </button>
        <button class="btn-share" onclick="shareReport()">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="18" cy="5" r="3"/>
            <circle cx="6" cy="12" r="3"/>
            <circle cx="18" cy="19" r="3"/>
            <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
            <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
          </svg>
          Share
        </button>
      </div>
    </div>

    <div class="analytics-container">
      <!-- KPI Cards Row -->
      <div class="kpi-row">
        <div class="kpi-card">
          <div class="kpi-icon security">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z"/>
            </svg>
          </div>
          <div class="kpi-content">
            <div class="kpi-value">92.5%</div>
            <div class="kpi-label">Security Health</div>
            <div class="kpi-trend positive">↑ 3.2%</div>
          </div>
          <div class="kpi-sparkline" id="healthSparkline"></div>
        </div>

        <div class="kpi-card">
          <div class="kpi-icon threats">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
              <line x1="12" y1="9" x2="12" y2="13"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
          </div>
          <div class="kpi-content">
            <div class="kpi-value">247</div>
            <div class="kpi-label">Active Threats</div>
            <div class="kpi-trend negative">↑ 12</div>
          </div>
          <div class="kpi-sparkline" id="threatsSparkline"></div>
        </div>

        <div class="kpi-card">
          <div class="kpi-icon compliance">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 11l3 3L22 4"/>
              <path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"/>
            </svg>
          </div>
          <div class="kpi-content">
            <div class="kpi-value">78%</div>
            <div class="kpi-label">Compliance Score</div>
            <div class="kpi-trend neutral">→ 0%</div>
          </div>
          <div class="kpi-sparkline" id="complianceSparkline"></div>
        </div>

        <div class="kpi-card">
          <div class="kpi-icon users">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
              <circle cx="9" cy="7" r="4"/>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
            </svg>
          </div>
          <div class="kpi-content">
            <div class="kpi-value">5,234</div>
            <div class="kpi-label">Protected Users</div>
            <div class="kpi-trend positive">↑ 156</div>
          </div>
          <div class="kpi-sparkline" id="usersSparkline"></div>
        </div>
      </div>

      <!-- Main Analytics Grid -->
      <div class="analytics-grid">
        <!-- Geographic Distribution Map -->
        <div class="analytics-card wide">
          <div class="card-header">
            <h2>Global Security Distribution</h2>
            <div class="card-actions">
              <select class="metric-selector" onchange="updateMapMetric(this.value)">
                <option value="threats">Threat Level</option>
                <option value="compliance">Compliance Score</option>
                <option value="users">User Activity</option>
                <option value="incidents">Security Incidents</option>
              </select>
            </div>
          </div>
          <div class="map-container" id="worldMap">
            <!-- SVG World Map -->
            <svg viewBox="0 0 1000 500" style="width: 100%; height: 400px;">
              <!-- Simplified world regions -->
              <g id="mapRegions">
                <!-- North America -->
                <path d="M 200 150 L 300 120 L 350 140 L 320 200 L 250 220 L 200 180 Z" 
                      fill="#3b82f6" opacity="0.7" class="region" data-region="na" 
                      onmouseover="showRegionTooltip(event, 'North America', 85)" 
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('na')"/>
                
                <!-- Europe -->
                <path d="M 480 140 L 550 130 L 580 160 L 560 190 L 500 180 L 480 160 Z" 
                      fill="#10b981" opacity="0.7" class="region" data-region="eu"
                      onmouseover="showRegionTooltip(event, 'Europe', 92)"
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('eu')"/>
                
                <!-- Asia -->
                <path d="M 650 180 L 750 170 L 800 200 L 780 250 L 700 260 L 650 220 Z" 
                      fill="#f59e0b" opacity="0.7" class="region" data-region="asia"
                      onmouseover="showRegionTooltip(event, 'Asia Pacific', 78)"
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('asia')"/>
                
                <!-- South America -->
                <path d="M 300 300 L 340 280 L 360 350 L 340 400 L 300 380 L 280 340 Z" 
                      fill="#ef4444" opacity="0.7" class="region" data-region="sa"
                      onmouseover="showRegionTooltip(event, 'South America', 65)"
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('sa')"/>
                
                <!-- Africa -->
                <path d="M 500 250 L 550 240 L 580 300 L 560 350 L 520 340 L 500 290 Z" 
                      fill="#8b5cf6" opacity="0.7" class="region" data-region="africa"
                      onmouseover="showRegionTooltip(event, 'Africa', 72)"
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('africa')"/>
                
                <!-- Australia -->
                <path d="M 750 350 L 820 340 L 840 380 L 810 400 L 760 390 L 750 370 Z" 
                      fill="#06b6d4" opacity="0.7" class="region" data-region="au"
                      onmouseover="showRegionTooltip(event, 'Australia', 88)"
                      onmouseout="hideTooltip()"
                      onclick="drillDownRegion('au')"/>
              </g>
              
              <!-- Legend -->
              <g id="mapLegend" transform="translate(20, 420)">
                <text x="0" y="0" font-size="12" fill="#64748b">Security Score</text>
                <rect x="0" y="10" width="20" height="10" fill="#ef4444"/>
                <text x="25" y="19" font-size="10" fill="#64748b">0-60</text>
                <rect x="60" y="10" width="20" height="10" fill="#f59e0b"/>
                <text x="85" y="19" font-size="10" fill="#64748b">61-80</text>
                <rect x="120" y="10" width="20" height="10" fill="#10b981"/>
                <text x="145" y="19" font-size="10" fill="#64748b">81-100</text>
              </g>
            </svg>
          </div>
        </div>

        <!-- Real-time Threat Matrix -->
        <div class="analytics-card">
          <div class="card-header">
            <h2>Threat Matrix</h2>
            <button class="btn-icon" onclick="toggleThreatView()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                <line x1="9" y1="3" x2="9" y2="21"/>
                <line x1="15" y1="3" x2="15" y2="21"/>
                <line x1="3" y1="9" x2="21" y2="9"/>
                <line x1="3" y1="15" x2="21" y2="15"/>
              </svg>
            </button>
          </div>
          <div class="threat-matrix" id="threatMatrix">
            <div class="matrix-grid">
              <div class="matrix-header"></div>
              <div class="matrix-header">Low Impact</div>
              <div class="matrix-header">Medium Impact</div>
              <div class="matrix-header">High Impact</div>
              
              <div class="matrix-label">High Likelihood</div>
              <div class="matrix-cell medium" data-threats="23">23</div>
              <div class="matrix-cell high" data-threats="45">45</div>
              <div class="matrix-cell critical" data-threats="12">12</div>
              
              <div class="matrix-label">Medium Likelihood</div>
              <div class="matrix-cell low" data-threats="67">67</div>
              <div class="matrix-cell medium" data-threats="34">34</div>
              <div class="matrix-cell high" data-threats="28">28</div>
              
              <div class="matrix-label">Low Likelihood</div>
              <div class="matrix-cell low" data-threats="89">89</div>
              <div class="matrix-cell low" data-threats="56">56</div>
              <div class="matrix-cell medium" data-threats="15">15</div>
            </div>
          </div>
        </div>

        <!-- Department Comparison -->
        <div class="analytics-card">
          <div class="card-header">
            <h2>Department Security Scores</h2>
            <button class="btn-icon" onclick="exportChart('department')">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
          <div class="department-chart">
            <canvas id="departmentRadar" width="300" height="300"></canvas>
          </div>
        </div>

        <!-- Time Series Analysis -->
        <div class="analytics-card wide tall">
          <div class="card-header">
            <h2>Security Trends Analysis</h2>
            <div class="card-actions">
              <div class="time-selector">
                <button class="time-btn active" data-period="1w">1W</button>
                <button class="time-btn" data-period="1m">1M</button>
                <button class="time-btn" data-period="3m">3M</button>
                <button class="time-btn" data-period="1y">1Y</button>
              </div>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="timeSeriesChart" width="800" height="400"></canvas>
          </div>
          <div class="chart-legend" id="timeSeriesLegend"></div>
        </div>

        <!-- Risk Assessment Gauge -->
        <div class="analytics-card">
          <div class="card-header">
            <h2>Overall Risk Assessment</h2>
          </div>
          <div class="risk-gauge-container">
            <div class="risk-gauge" id="riskGauge">
              <svg viewBox="0 0 200 120" width="100%" height="200">
                <defs>
                  <linearGradient id="gaugeGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:#10b981;stop-opacity:1" />
                    <stop offset="50%" style="stop-color:#f59e0b;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#ef4444;stop-opacity:1" />
                  </linearGradient>
                </defs>
                
                <!-- Background arc -->
                <path d="M 20 100 A 80 80 0 0 1 180 100" 
                      stroke="#e5e7eb" stroke-width="20" fill="none" stroke-linecap="round"/>
                
                <!-- Value arc -->
                <path d="M 20 100 A 80 80 0 0 1 140 60" 
                      stroke="url(#gaugeGradient)" stroke-width="20" fill="none" stroke-linecap="round"
                      class="gauge-value" id="gaugeValue"/>
                
                <!-- Needle -->
                <line x1="100" y1="100" x2="100" y2="30" stroke="#1e293b" stroke-width="3"
                      transform="rotate(45 100 100)" id="gaugeNeedle"/>
                <circle cx="100" cy="100" r="5" fill="#1e293b"/>
                
                <!-- Labels -->
                <text x="20" y="115" font-size="12" fill="#64748b">Low</text>
                <text x="90" y="25" font-size="12" fill="#64748b">Medium</text>
                <text x="165" y="115" font-size="12" fill="#64748b">High</text>
              </svg>
            </div>
            <div class="risk-details">
              <div class="risk-score">
                <span class="score-label">Risk Score</span>
                <span class="score-value">72</span>
              </div>
              <div class="risk-factors">
                <div class="factor">
                  <span class="factor-label">Critical Issues</span>
                  <span class="factor-value">3</span>
                </div>
                <div class="factor">
                  <span class="factor-label">Open Vulnerabilities</span>
                  <span class="factor-value">47</span>
                </div>
                <div class="factor">
                  <span class="factor-label">Compliance Gaps</span>
                  <span class="factor-value">12</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Activity Feed -->
        <div class="analytics-card">
          <div class="card-header">
            <h2>Live Security Feed</h2>
            <span class="live-indicator">
              <span class="pulse"></span>
              LIVE
            </span>
          </div>
          <div class="activity-feed" id="activityFeed">
            <!-- Feed items will be dynamically added -->
          </div>
        </div>
      </div>
    </div>

    <!-- Tooltip -->
    <div id="tooltip" class="tooltip"></div>

    <!-- Export Modal -->
    <div id="exportModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeExportModal()">&times;</span>
        <h2>Export Options</h2>
        <div class="export-options">
          <button class="export-option" onclick="exportAs('pdf')">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
              <polyline points="14 2 14 8 20 8"/>
            </svg>
            <span>Export as PDF</span>
          </button>
          <button class="export-option" onclick="exportAs('excel')">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
              <polyline points="14 2 14 8 20 8"/>
              <line x1="16" y1="13" x2="8" y2="13"/>
              <line x1="16" y1="17" x2="8" y2="17"/>
              <polyline points="10 9 9 9 8 9"/>
            </svg>
            <span>Export to Excel</span>
          </button>
          <button class="export-option" onclick="exportAs('powerbi')">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <rect x="7" y="7" width="3" height="9"/>
              <rect x="14" y="7" width="3" height="9"/>
            </svg>
            <span>Open in Power BI</span>
          </button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    background: #f8fafc;
    min-height: 100vh;
    padding: 0;
  }

  .analytics-header {
    background: white;
    padding: 1.5rem 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-content h1 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin: 0;
  }

  .header-content p {
    font-size: 0.875rem;
    color: #64748b;
    margin: 0.25rem 0 0 0;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
  }

  .btn-refresh,
  .btn-export,
  .btn-share {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    color: #475569;
    transition: all 0.2s;
  }

  .btn-refresh:hover,
  .btn-export:hover,
  .btn-share:hover {
    background: #f8fafc;
    border-color: #cbd5e1;
  }

  .analytics-container {
    padding: 2rem;
    max-width: 1800px;
    margin: 0 auto;
  }

  /* KPI Cards */
  .kpi-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .kpi-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 1rem;
    position: relative;
    overflow: hidden;
    transition: all 0.3s;
  }

  .kpi-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .kpi-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .kpi-icon.security {
    background: rgba(99, 102, 241, 0.1);
    color: #6366f1;
  }

  .kpi-icon.threats {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .kpi-icon.compliance {
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
  }

  .kpi-icon.users {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }

  .kpi-content {
    flex: 1;
  }

  .kpi-value {
    font-size: 1.875rem;
    font-weight: 700;
    color: #1e293b;
    line-height: 1;
  }

  .kpi-label {
    font-size: 0.875rem;
    color: #64748b;
    margin-top: 0.25rem;
  }

  .kpi-trend {
    font-size: 0.75rem;
    font-weight: 600;
    margin-top: 0.5rem;
  }

  .kpi-trend.positive {
    color: #10b981;
  }

  .kpi-trend.negative {
    color: #ef4444;
  }

  .kpi-trend.neutral {
    color: #64748b;
  }

  .kpi-sparkline {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 100px;
    height: 40px;
    opacity: 0.3;
  }

  /* Analytics Grid */
  .analytics-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(400px, auto);
    gap: 1.5rem;
  }

  .analytics-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    transition: all 0.3s;
  }

  .analytics-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .analytics-card.wide {
    grid-column: span 2;
  }

  .analytics-card.tall {
    grid-row: span 2;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .card-header h2 {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1e293b;
    margin: 0;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
  }

  .metric-selector {
    padding: 0.375rem 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 0.875rem;
    color: #475569;
    background: white;
    cursor: pointer;
  }

  .btn-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    cursor: pointer;
    color: #64748b;
    transition: all 0.2s;
  }

  .btn-icon:hover {
    background: #f8fafc;
    color: #475569;
  }

  /* Map Container */
  .map-container {
    position: relative;
    flex: 1;
  }

  .region {
    cursor: pointer;
    transition: all 0.3s;
  }

  .region:hover {
    opacity: 1 !important;
    stroke: #1e293b;
    stroke-width: 2;
  }

  /* Threat Matrix */
  .matrix-grid {
    display: grid;
    grid-template-columns: 120px repeat(3, 1fr);
    gap: 0.75rem;
  }

  .matrix-header {
    font-size: 0.75rem;
    font-weight: 600;
    color: #475569;
    text-align: center;
    padding: 0.5rem;
  }

  .matrix-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: #475569;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 0.5rem;
  }

  .matrix-cell {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    border-radius: 8px;
    font-weight: 700;
    font-size: 1.25rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .matrix-cell:hover {
    transform: scale(1.05);
  }

  .matrix-cell.low {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }

  .matrix-cell.medium {
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
  }

  .matrix-cell.high {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .matrix-cell.critical {
    background: rgba(220, 38, 38, 0.2);
    color: #dc2626;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4); }
    70% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
    100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
  }

  /* Time Selector */
  .time-selector {
    display: flex;
    background: #f1f5f9;
    border-radius: 6px;
    padding: 2px;
  }

  .time-btn {
    padding: 0.375rem 0.75rem;
    background: transparent;
    border: none;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    color: #64748b;
    cursor: pointer;
    transition: all 0.2s;
  }

  .time-btn:hover {
    color: #475569;
  }

  .time-btn.active {
    background: white;
    color: #1e293b;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Chart Container */
  .chart-container {
    flex: 1;
    position: relative;
  }

  .chart-legend {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  /* Risk Gauge */
  .risk-gauge-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
  }

  .risk-details {
    text-align: center;
  }

  .risk-score {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
  }

  .score-label {
    font-size: 0.875rem;
    color: #64748b;
  }

  .score-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1e293b;
  }

  .risk-factors {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .factor {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem;
    background: #f8fafc;
    border-radius: 6px;
  }

  .factor-label {
    font-size: 0.75rem;
    color: #64748b;
  }

  .factor-value {
    font-weight: 600;
    color: #1e293b;
  }

  /* Activity Feed */
  .activity-feed {
    flex: 1;
    overflow-y: auto;
    max-height: 300px;
  }

  .live-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    color: #ef4444;
  }

  .pulse {
    width: 8px;
    height: 8px;
    background: #ef4444;
    border-radius: 50%;
    animation: pulse-live 1.5s infinite;
  }

  @keyframes pulse-live {
    0% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.5; transform: scale(1.2); }
    100% { opacity: 1; transform: scale(1); }
  }

  /* Tooltip */
  .tooltip {
    position: absolute;
    background: #1e293b;
    color: white;
    padding: 0.75rem;
    border-radius: 6px;
    font-size: 0.875rem;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .tooltip.show {
    opacity: 1;
  }

  /* Export Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    animation: fadeIn 0.3s;
  }

  .modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 2rem;
    border-radius: 12px;
    width: 90%;
    max-width: 500px;
    position: relative;
    animation: slideIn 0.3s;
  }

  .close {
    position: absolute;
    right: 1rem;
    top: 1rem;
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    color: #64748b;
    transition: color 0.3s;
  }

  .close:hover {
    color: #1e293b;
  }

  .export-options {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 2rem;
  }

  .export-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1.5rem;
    background: #f8fafc;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
  }

  .export-option:hover {
    background: white;
    border-color: #3b82f6;
    transform: translateY(-2px);
  }

  .export-option span {
    font-size: 0.875rem;
    font-weight: 500;
    color: #475569;
  }

  @media (max-width: 1200px) {
    .analytics-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .analytics-card.wide {
      grid-column: span 2;
    }
  }

  @media (max-width: 768px) {
    .analytics-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .header-actions {
      justify-content: center;
    }

    .kpi-row {
      grid-template-columns: 1fr;
    }

    .analytics-grid {
      grid-template-columns: 1fr;
    }

    .analytics-card.wide {
      grid-column: 1;
    }

    .export-options {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Initialize dashboard on load
  document.addEventListener('DOMContentLoaded', () => {
    initializeKPISparklines();
    initializeDepartmentRadar();
    initializeTimeSeriesChart();
    initializeActivityFeed();
    animateRiskGauge();
    setupEventListeners();
  });

  // KPI Sparklines
  function initializeKPISparklines() {
    const sparklineData = {
      health: [85, 87, 86, 89, 88, 91, 92.5],
      threats: [235, 242, 238, 245, 241, 248, 247],
      compliance: [78, 78, 77, 78, 79, 78, 78],
      users: [5078, 5102, 5145, 5189, 5201, 5223, 5234]
    };

    drawSparkline('healthSparkline', sparklineData.health, '#6366f1');
    drawSparkline('threatsSparkline', sparklineData.threats, '#ef4444');
    drawSparkline('complianceSparkline', sparklineData.compliance, '#10b981');
    drawSparkline('usersSparkline', sparklineData.users, '#3b82f6');
  }

  function drawSparkline(elementId, data, color) {
    const element = document.getElementById(elementId);
    if (!element) return;

    const width = 100;
    const height = 40;
    const max = Math.max(...data);
    const min = Math.min(...data);
    const range = max - min || 1;

    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', width);
    svg.setAttribute('height', height);
    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);

    const points = data.map((value, index) => {
      const x = (index / (data.length - 1)) * width;
      const y = height - ((value - min) / range) * height;
      return `${x},${y}`;
    }).join(' ');

    const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
    polyline.setAttribute('points', points);
    polyline.setAttribute('fill', 'none');
    polyline.setAttribute('stroke', color);
    polyline.setAttribute('stroke-width', '2');

    svg.appendChild(polyline);
    element.appendChild(svg);
  }

  // Department Radar Chart
  function initializeDepartmentRadar() {
    const canvas = document.getElementById('departmentRadar');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const centerX = 150;
    const centerY = 150;
    const radius = 100;

    const departments = [
      { name: 'IT', score: 92 },
      { name: 'Finance', score: 78 },
      { name: 'HR', score: 85 },
      { name: 'Sales', score: 65 },
      { name: 'Operations', score: 88 },
      { name: 'Marketing', score: 72 }
    ];

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw grid
    for (let i = 20; i <= 100; i += 20) {
      ctx.beginPath();
      ctx.arc(centerX, centerY, (radius * i) / 100, 0, Math.PI * 2);
      ctx.strokeStyle = '#e5e7eb';
      ctx.lineWidth = 1;
      ctx.stroke();
    }

    // Draw axes and labels
    const angleStep = (Math.PI * 2) / departments.length;
    departments.forEach((dept, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;

      // Draw axis
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(x, y);
      ctx.strokeStyle = '#e5e7eb';
      ctx.lineWidth = 1;
      ctx.stroke();

      // Draw label
      const labelX = centerX + Math.cos(angle) * (radius + 25);
      const labelY = centerY + Math.sin(angle) * (radius + 25);
      ctx.font = '12px Inter';
      ctx.fillStyle = '#475569';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(dept.name, labelX, labelY);
    });

    // Draw data polygon
    ctx.beginPath();
    departments.forEach((dept, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const distance = (radius * dept.score) / 100;
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;

      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    ctx.closePath();

    // Fill polygon
    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);
    gradient.addColorStop(0, 'rgba(99, 102, 241, 0.4)');
    gradient.addColorStop(1, 'rgba(99, 102, 241, 0.1)');
    ctx.fillStyle = gradient;
    ctx.fill();

    ctx.strokeStyle = '#6366f1';
    ctx.lineWidth = 2;
    ctx.stroke();

    // Draw data points
    departments.forEach((dept, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const distance = (radius * dept.score) / 100;
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;

      ctx.beginPath();
      ctx.arc(x, y, 4, 0, Math.PI * 2);
      ctx.fillStyle = '#6366f1';
      ctx.fill();
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 2;
      ctx.stroke();
    });
  }

  // Time Series Chart
  function initializeTimeSeriesChart() {
    const canvas = document.getElementById('timeSeriesChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    const padding = 60;

    const datasets = [
      {
        label: 'Security Score',
        color: '#6366f1',
        data: generateTimeSeriesData(30, 70, 95)
      },
      {
        label: 'Threat Level',
        color: '#ef4444',
        data: generateTimeSeriesData(30, 20, 60)
      },
      {
        label: 'Compliance',
        color: '#10b981',
        data: generateTimeSeriesData(30, 60, 90)
      }
    ];

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Draw grid
    ctx.strokeStyle = '#e5e7eb';
    ctx.lineWidth = 1;

    // Horizontal grid lines
    for (let i = 0; i <= 5; i++) {
      const y = padding + (height - 2 * padding) * (i / 5);
      ctx.beginPath();
      ctx.moveTo(padding, y);
      ctx.lineTo(width - padding, y);
      ctx.stroke();

      // Y-axis labels
      ctx.font = '12px Inter';
      ctx.fillStyle = '#64748b';
      ctx.textAlign = 'right';
      ctx.fillText((100 - i * 20).toString(), padding - 10, y + 4);
    }

    // Draw axes
    ctx.strokeStyle = '#94a3b8';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, height - padding);
    ctx.lineTo(width - padding, height - padding);
    ctx.stroke();

    // Draw datasets
    datasets.forEach((dataset, datasetIndex) => {
      ctx.strokeStyle = dataset.color;
      ctx.lineWidth = 3;
      ctx.beginPath();

      dataset.data.forEach((value, index) => {
        const x = padding + (width - 2 * padding) * (index / (dataset.data.length - 1));
        const y = padding + (height - 2 * padding) * (1 - value / 100);

        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });

      ctx.stroke();

      // Draw area under curve
      ctx.lineTo(width - padding, height - padding);
      ctx.lineTo(padding, height - padding);
      ctx.closePath();
      ctx.fillStyle = dataset.color + '20';
      ctx.fill();
    });

    // Update legend
    const legend = document.getElementById('timeSeriesLegend');
    if (legend) {
      legend.innerHTML = datasets.map(dataset => `
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <div style="width: 20px; height: 3px; background: ${dataset.color};"></div>
          <span style="font-size: 0.875rem; color: #475569;">${dataset.label}</span>
        </div>
      `).join('');
    }
  }

  function generateTimeSeriesData(points, min, max) {
    const data = [];
    let value = (min + max) / 2;

    for (let i = 0; i < points; i++) {
      value += (Math.random() - 0.5) * 10;
      value = Math.max(min, Math.min(max, value));
      data.push(value);
    }

    return data;
  }

  // Activity Feed
  function initializeActivityFeed() {
    const feed = document.getElementById('activityFeed');
    if (!feed) return;

    const activities = [
      { type: 'alert', message: 'Critical vulnerability detected in Exchange Server', time: 'Just now' },
      { type: 'success', message: 'Security patch successfully applied to 127 endpoints', time: '2 min ago' },
      { type: 'warning', message: 'Unusual login pattern detected for admin account', time: '5 min ago' },
      { type: 'info', message: 'Compliance scan completed - 3 new findings', time: '12 min ago' },
      { type: 'alert', message: 'DDoS attack attempt blocked', time: '15 min ago' }
    ];

    feed.innerHTML = activities.map(activity => `
      <div style="padding: 0.75rem; border-left: 3px solid ${getActivityColor(activity.type)}; margin-bottom: 0.5rem; background: #f8fafc; border-radius: 0 6px 6px 0;">
        <div style="display: flex; justify-content: space-between; align-items: start;">
          <p style="font-size: 0.875rem; color: #1e293b; margin: 0;">${activity.message}</p>
          <span style="font-size: 0.75rem; color: #64748b; white-space: nowrap; margin-left: 1rem;">${activity.time}</span>
        </div>
      </div>
    `).join('');

    // Simulate live updates
    setInterval(() => {
      addNewActivity();
    }, 10000);
  }

  function getActivityColor(type) {
    const colors = {
      alert: '#ef4444',
      success: '#10b981',
      warning: '#f59e0b',
      info: '#3b82f6'
    };
    return colors[type] || '#64748b';
  }

  function addNewActivity() {
    const feed = document.getElementById('activityFeed');
    const activities = [
      { type: 'alert', message: 'Suspicious file upload detected' },
      { type: 'success', message: 'MFA enabled for 12 new users' },
      { type: 'warning', message: 'Certificate expiring in 7 days' },
      { type: 'info', message: 'Security report generated' }
    ];

    const randomActivity = activities[Math.floor(Math.random() * activities.length)];
    const newItem = document.createElement('div');
    newItem.style.cssText = `padding: 0.75rem; border-left: 3px solid ${getActivityColor(randomActivity.type)}; margin-bottom: 0.5rem; background: #f8fafc; border-radius: 0 6px 6px 0; opacity: 0; transition: opacity 0.5s;`;
    newItem.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: start;">
        <p style="font-size: 0.875rem; color: #1e293b; margin: 0;">${randomActivity.message}</p>
        <span style="font-size: 0.75rem; color: #64748b; white-space: nowrap; margin-left: 1rem;">Just now</span>
      </div>
    `;

    feed.insertBefore(newItem, feed.firstChild);
    setTimeout(() => newItem.style.opacity = '1', 10);

    // Remove old items
    while (feed.children.length > 5) {
      feed.removeChild(feed.lastChild);
    }
  }

  // Risk Gauge Animation
  function animateRiskGauge() {
    const needle = document.getElementById('gaugeNeedle');
    const riskScore = 72;
    const angle = -90 + (riskScore / 100) * 180;

    setTimeout(() => {
      needle.style.transition = 'transform 1.5s ease-out';
      needle.style.transform = `rotate(${angle}deg)`;
      needle.style.transformOrigin = '0 0';
    }, 500);
  }

  // Event Listeners
  function setupEventListeners() {
    // Time period selectors
    document.querySelectorAll('.time-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
        updateTimeSeriesChart(e.target.dataset.period);
      });
    });

    // Matrix cells
    document.querySelectorAll('.matrix-cell').forEach(cell => {
      cell.addEventListener('click', () => {
        const threats = cell.dataset.threats;
        showThreatDetails(threats);
      });
    });
  }

  // Helper Functions
  function showRegionTooltip(event, region, score) {
    const tooltip = document.getElementById('tooltip');
    tooltip.innerHTML = `
      <strong>${region}</strong><br>
      Security Score: ${score}%<br>
      Active Threats: ${Math.floor(Math.random() * 50) + 10}<br>
      Compliance: ${Math.floor(Math.random() * 20) + 70}%
    `;
    tooltip.style.left = event.pageX + 10 + 'px';
    tooltip.style.top = event.pageY - 10 + 'px';
    tooltip.classList.add('show');
  }

  function hideTooltip() {
    document.getElementById('tooltip').classList.remove('show');
  }

  function drillDownRegion(region) {
    console.log('Drilling down into region:', region);
    // Implement region drill-down logic
  }

  function updateMapMetric(metric) {
    console.log('Updating map for metric:', metric);
    // Update map visualization based on selected metric
  }

  function toggleThreatView() {
    console.log('Toggling threat view');
    // Toggle between different threat visualizations
  }

  function exportChart(chartType) {
    console.log('Exporting chart:', chartType);
    // Implement chart export functionality
  }

  function updateTimeSeriesChart(period) {
    console.log('Updating time series for period:', period);
    initializeTimeSeriesChart(); // Reinitialize with new data
  }

  function showThreatDetails(count) {
    console.log('Showing details for', count, 'threats');
    // Show detailed threat information
  }

  function refreshAllData() {
    console.log('Refreshing all data...');
    // Simulate data refresh
    const btn = event.target.closest('button');
    btn.disabled = true;
    btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="spin"><polyline points="23 4 23 10 17 10"/><polyline points="1 20 1 14 7 14"/><path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"/></svg> Refreshing...';
    
    setTimeout(() => {
      btn.disabled = false;
      btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="23 4 23 10 17 10"/><polyline points="1 20 1 14 7 14"/><path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"/></svg> Refresh';
      
      // Reinitialize all charts
      initializeKPISparklines();
      initializeDepartmentRadar();
      initializeTimeSeriesChart();
    }, 2000);
  }

  function showExportOptions() {
    document.getElementById('exportModal').style.display = 'block';
  }

  function closeExportModal() {
    document.getElementById('exportModal').style.display = 'none';
  }

  function exportAs(format) {
    console.log('Exporting as:', format);
    closeExportModal();
    
    // Simulate export
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `powerreview-analytics-${timestamp}.${format}`;
    
    console.log(`Exporting to ${filename}`);
  }

  function shareReport() {
    console.log('Sharing report...');
    // Implement share functionality
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('exportModal');
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  }

  // Add spinning animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    .spin {
      animation: spin 1s linear infinite;
    }
  `;
  document.head.appendChild(style);
</script>