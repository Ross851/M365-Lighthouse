---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Assessment Execution - PowerReview">
	<main class="execution-main">
		<div class="container">
			<div class="header">
				<h1>PowerReview Assessment in Progress</h1>
				<div class="customer-info">
					<span id="customer-name">Loading customer info...</span>
					<span class="separator">‚Ä¢</span>
					<span id="tenant-domain">Loading tenant...</span>
				</div>
			</div>

			<!-- Real-time Status Dashboard -->
			<div class="status-dashboard">
				<div class="overall-status">
					<div class="status-icon" id="overall-icon">
						<div class="spinner"></div>
					</div>
					<div class="status-content">
						<h2 id="overall-status">Initializing Assessment</h2>
						<p id="overall-progress">Preparing to connect to Microsoft 365...</p>
						<div class="progress-bar">
							<div class="progress-fill" id="progress-fill" style="width: 0%"></div>
						</div>
						<div class="progress-text">
							<span id="current-step">0</span> of <span id="total-steps">0</span> checks completed
						</div>
					</div>
				</div>

				<!-- Connection Status -->
				<div class="connection-status">
					<div class="connection-item" id="ps-connection">
						<div class="connection-icon">‚ö°</div>
						<div class="connection-details">
							<h4>PowerShell Bridge</h4>
							<span class="status-text">Disconnected</span>
						</div>
					</div>
					<div class="connection-item" id="ms-connection">
						<div class="connection-icon">üîê</div>
						<div class="connection-details">
							<h4>Microsoft 365</h4>
							<span class="status-text">Not connected</span>
						</div>
					</div>
					<div class="connection-item" id="graph-connection">
						<div class="connection-icon">üìä</div>
						<div class="connection-details">
							<h4>Graph API</h4>
							<span class="status-text">Not connected</span>
						</div>
					</div>
				</div>
			</div>

			<!-- Live Assessment Progress -->
			<div class="assessment-progress">
				<h3>Assessment Areas</h3>
				<div class="progress-grid" id="progress-grid">
					<!-- Progress items will be populated dynamically -->
				</div>
			</div>

			<!-- Live Activity Log -->
			<div class="activity-log">
				<div class="log-header">
					<h3>Live Activity Log</h3>
					<div class="log-controls">
						<button id="pause-log" class="log-btn">‚è∏Ô∏è Pause</button>
						<button id="clear-log" class="log-btn">üóëÔ∏è Clear</button>
						<button id="download-log" class="log-btn">üíæ Download</button>
					</div>
				</div>
				<div class="log-container" id="log-container">
					<div class="log-entry system">
						<span class="timestamp">[00:00:00]</span>
						<span class="level info">[INFO]</span>
						<span class="message">PowerReview assessment initialization started</span>
					</div>
				</div>
			</div>

			<!-- Action Controls -->
			<div class="action-controls">
				<button id="pause-assessment" class="control-btn warning">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<rect x="6" y="4" width="4" height="16"/>
						<rect x="14" y="4" width="4" height="16"/>
					</svg>
					Pause Assessment
				</button>
				<button id="stop-assessment" class="control-btn danger">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
					</svg>
					Stop Assessment
				</button>
				<button id="view-results" class="control-btn primary" style="display: none;">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<polyline points="22 4 12 14.01 9 11.01"/>
					</svg>
					View Results
				</button>
			</div>
		</div>
	</main>
</Layout>

<style>
	.execution-main {
		min-height: 100vh;
		background: linear-gradient(180deg, #f8fafc 0%, #e2e8f0 100%);
		padding: 2rem 1rem;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
	}

	.header {
		text-align: center;
		margin-bottom: 2rem;
	}

	.header h1 {
		color: var(--color-dark);
		margin-bottom: 0.5rem;
		font-size: 2.5rem;
		font-weight: 800;
	}

	.customer-info {
		color: var(--color-gray);
		font-size: 1.1rem;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
	}

	.separator {
		color: #ccc;
	}

	/* Status Dashboard */
	.status-dashboard {
		background: white;
		border-radius: 16px;
		padding: 2rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		margin-bottom: 2rem;
	}

	.overall-status {
		display: flex;
		align-items: center;
		gap: 1.5rem;
		margin-bottom: 2rem;
		padding-bottom: 2rem;
		border-bottom: 1px solid #e5e7eb;
	}

	.status-icon {
		width: 80px;
		height: 80px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		background: #f3f4f6;
		flex-shrink: 0;
	}

	.status-icon.running {
		background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
		color: white;
	}

	.status-icon.success {
		background: linear-gradient(135deg, #10b981 0%, #059669 100%);
		color: white;
	}

	.status-icon.error {
		background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
		color: white;
	}

	.spinner {
		width: 40px;
		height: 40px;
		border: 4px solid #f3f3f3;
		border-top: 4px solid #3b82f6;
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.status-content {
		flex: 1;
	}

	.status-content h2 {
		margin: 0 0 0.5rem;
		color: var(--color-dark);
		font-size: 1.5rem;
	}

	.status-content p {
		margin: 0 0 1rem;
		color: var(--color-gray);
	}

	.progress-bar {
		width: 100%;
		height: 12px;
		background: #f3f4f6;
		border-radius: 6px;
		overflow: hidden;
		margin-bottom: 0.5rem;
	}

	.progress-fill {
		height: 100%;
		background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
		border-radius: 6px;
		transition: width 0.3s ease;
	}

	.progress-text {
		font-size: 0.875rem;
		color: var(--color-gray);
	}

	/* Connection Status */
	.connection-status {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1rem;
	}

	.connection-item {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1rem;
		background: #f8f9fa;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	.connection-item.connected {
		background: #d1fae5;
		border: 2px solid #10b981;
	}

	.connection-item.error {
		background: #fee2e2;
		border: 2px solid #ef4444;
	}

	.connection-icon {
		font-size: 1.5rem;
		width: 40px;
		height: 40px;
		display: flex;
		align-items: center;
		justify-content: center;
		background: white;
		border-radius: 50%;
	}

	.connection-details h4 {
		margin: 0 0 0.25rem;
		font-size: 0.875rem;
		color: var(--color-dark);
	}

	.status-text {
		font-size: 0.75rem;
		color: var(--color-gray);
	}

	.connection-item.connected .status-text {
		color: #059669;
		font-weight: 600;
	}

	.connection-item.error .status-text {
		color: #dc2626;
		font-weight: 600;
	}

	/* Assessment Progress */
	.assessment-progress {
		background: white;
		border-radius: 16px;
		padding: 2rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		margin-bottom: 2rem;
	}

	.assessment-progress h3 {
		margin: 0 0 1.5rem;
		color: var(--color-dark);
	}

	.progress-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 1rem;
	}

	.progress-item {
		padding: 1rem;
		border: 2px solid #e5e7eb;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	.progress-item.pending {
		background: #f9fafb;
	}

	.progress-item.running {
		background: #eff6ff;
		border-color: #3b82f6;
	}

	.progress-item.completed {
		background: #f0fdf4;
		border-color: #10b981;
	}

	.progress-item.failed {
		background: #fef2f2;
		border-color: #ef4444;
	}

	.progress-header {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 0.5rem;
	}

	.progress-icon {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 0.75rem;
		background: #e5e7eb;
		color: #6b7280;
	}

	.progress-item.running .progress-icon {
		background: #3b82f6;
		color: white;
	}

	.progress-item.completed .progress-icon {
		background: #10b981;
		color: white;
	}

	.progress-item.failed .progress-icon {
		background: #ef4444;
		color: white;
	}

	.progress-title {
		font-weight: 600;
		color: var(--color-dark);
	}

	.progress-details {
		font-size: 0.875rem;
		color: var(--color-gray);
	}

	/* Activity Log */
	.activity-log {
		background: white;
		border-radius: 16px;
		padding: 2rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		margin-bottom: 2rem;
	}

	.log-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.log-header h3 {
		margin: 0;
		color: var(--color-dark);
	}

	.log-controls {
		display: flex;
		gap: 0.5rem;
	}

	.log-btn {
		padding: 0.5rem 1rem;
		background: #f3f4f6;
		border: 1px solid #d1d5db;
		border-radius: 6px;
		font-size: 0.875rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.log-btn:hover {
		background: #e5e7eb;
	}

	.log-container {
		height: 300px;
		overflow-y: auto;
		border: 1px solid #e5e7eb;
		border-radius: 8px;
		padding: 1rem;
		background: #fafafa;
		font-family: 'SF Mono', 'Monaco', 'Cascadia Code', monospace;
		font-size: 0.875rem;
	}

	.log-entry {
		margin-bottom: 0.5rem;
		line-height: 1.4;
	}

	.log-entry.system {
		color: #6b7280;
	}

	.timestamp {
		color: #9ca3af;
	}

	.level {
		font-weight: 600;
		margin: 0 0.5rem;
	}

	.level.info {
		color: #3b82f6;
	}

	.level.success {
		color: #10b981;
	}

	.level.warning {
		color: #f59e0b;
	}

	.level.error {
		color: #ef4444;
	}

	.message {
		color: var(--color-dark);
	}

	/* Action Controls */
	.action-controls {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.control-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.875rem 1.5rem;
		border: none;
		border-radius: 10px;
		font-size: 1rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.control-btn.primary {
		background: linear-gradient(135deg, #10b981 0%, #059669 100%);
		color: white;
	}

	.control-btn.warning {
		background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
		color: white;
	}

	.control-btn.danger {
		background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
		color: white;
	}

	.control-btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
	}

	@media (max-width: 768px) {
		.overall-status {
			flex-direction: column;
			text-align: center;
		}

		.connection-status {
			grid-template-columns: 1fr;
		}

		.progress-grid {
			grid-template-columns: 1fr;
		}

		.log-header {
			flex-direction: column;
			gap: 1rem;
		}

		.action-controls {
			flex-direction: column;
		}
	}
</style>

<script>
	// WebSocket connection for real-time updates
	let ws = null;
	let assessmentData = null;
	let logPaused = false;
	let startTime = Date.now();

	// Initialize page
	window.addEventListener('DOMContentLoaded', () => {
		loadAssessmentData();
		connectWebSocket();
		setupEventListeners();
		
		// Auto-start demo if coming from home page or reports
		const referrer = document.referrer;
		const isDemo = referrer.includes('/home') || referrer.includes('/reports') || !localStorage.getItem('powerreview_assessments');
		
		if (isDemo) {
			// Set up demo data
			const demoAssessments = ['azuread', 'exchange', 'defender', 'sharepoint'];
			localStorage.setItem('powerreview_assessments', JSON.stringify(demoAssessments));
			localStorage.setItem('powerreview_customer', JSON.stringify({
				organization: 'Demo Organization',
				contact: 'Demo User',
				purpose: 'Security Assessment Demo'
			}));
			
			// Auto-start after a short delay
			setTimeout(() => {
				startAssessment();
			}, 1000);
		}
	});

	function loadAssessmentData() {
		// Load customer and assessment data
		const urlParams = new URLSearchParams(window.location.search);
		const customerData = JSON.parse(localStorage.getItem('powerreview_customer') || '{}');
		const assessments = JSON.parse(localStorage.getItem('powerreview_assessments') || '[]');
		
		// Get customer info from URL params, localStorage, or defaults
		const customerName = urlParams.get('customer') || customerData.organization || 'Demo Organization';
		const tenantDomain = urlParams.get('tenant') || sessionStorage.getItem('tenantDomain') || 'contoso.onmicrosoft.com';
		
		document.getElementById('customer-name').textContent = customerName;
		document.getElementById('tenant-domain').textContent = tenantDomain;
		
		// Store for later use
		sessionStorage.setItem('current_customer', customerName);
		sessionStorage.setItem('current_tenant', tenantDomain);
		
		// Create progress items for selected assessments
		const selectedAssessments = assessments.length > 0 ? assessments : ['azuread', 'exchange', 'defender', 'sharepoint', 'teams', 'compliance'];
		createProgressItems(selectedAssessments);
	}

	function createProgressItems(assessments) {
		const progressGrid = document.getElementById('progress-grid');
		const assessmentMap = {
			'azuread': 'Azure AD & Identity',
			'exchange': 'Exchange Online',
			'defender': 'Microsoft Defender',
			'sharepoint': 'SharePoint & OneDrive',
			'teams': 'Microsoft Teams',
			'dlp': 'Data Loss Prevention',
			'compliance': 'Compliance & Audit',
			'purview': 'Microsoft Purview',
			'powerplatform': 'Power Platform'
		};

		assessments.forEach(assessment => {
			const item = document.createElement('div');
			item.className = 'progress-item pending';
			item.id = `progress-${assessment}`;
			item.innerHTML = `
				<div class="progress-header">
					<div class="progress-icon">‚è≥</div>
					<div class="progress-title">${assessmentMap[assessment] || assessment}</div>
				</div>
				<div class="progress-details">Waiting to start...</div>
			`;
			progressGrid.appendChild(item);
		});

		// Update total steps
		document.getElementById('total-steps').textContent = assessments.length.toString();
	}

	function connectWebSocket() {
		// Simulate WebSocket connection - in production, connect to actual WebSocket server
		// ws = new WebSocket('ws://localhost:3001/assessment');
		
		// For demo, simulate real-time updates
		simulateAssessmentProgress();
	}

	function simulateAssessmentProgress() {
		updateConnectionStatus('ps-connection', 'connected', 'Connected');
		addLogEntry('info', 'PowerShell bridge connection established');
		
		setTimeout(() => {
			updateConnectionStatus('ms-connection', 'connected', 'Authenticated');
			addLogEntry('success', 'Microsoft 365 authentication successful');
			updateOverallStatus('Connecting to Services', 'Authenticating with Microsoft 365...', 15);
		}, 1000);

		setTimeout(() => {
			updateConnectionStatus('graph-connection', 'connected', 'Active');
			addLogEntry('success', 'Microsoft Graph API connection established');
			updateOverallStatus('Starting Assessment', 'Beginning security analysis...', 25);
		}, 2000);

		// Get assessments from URL or use defaults
		const urlAssessments = getAssessmentsFromURL();
		const assessments = urlAssessments.length > 0 ? urlAssessments : ['azuread', 'exchange', 'defender', 'sharepoint', 'teams', 'compliance'];
		let currentAssessment = 0;
		let completedChecks = 0;
		const totalChecks = assessments.length;
		
		// Update the total checks display
		document.getElementById('current-step').textContent = '0';
		document.getElementById('total-steps').textContent = totalChecks.toString();

		function runNextAssessment() {
			if (currentAssessment >= assessments.length) {
				completeAssessment();
				return;
			}

			const assessment = assessments[currentAssessment];
			runAssessment(assessment, () => {
				currentAssessment++;
				completedChecks++;
				// Update progress counter
				document.getElementById('current-step').textContent = completedChecks.toString();
				updateOverallStatus('Assessment Progress', `Completed ${completedChecks} of ${totalChecks} checks`, Math.round((completedChecks / totalChecks) * 100));
				setTimeout(runNextAssessment, 2000);
			});
		}

		setTimeout(runNextAssessment, 3000);
	}

	function runAssessment(assessment, callback) {
		const item = document.getElementById(`progress-${assessment}`);
		const icon = item.querySelector('.progress-icon');
		const details = item.querySelector('.progress-details');
		
		// Start assessment
		item.className = 'progress-item running';
		icon.innerHTML = 'üîÑ';
		details.textContent = 'Running security checks...';
		addLogEntry('info', `Starting ${assessment} assessment`);
		
		// Simulate progress
		setTimeout(() => {
			details.textContent = 'Collecting configuration data...';
			addLogEntry('info', `Analyzing ${assessment} configuration`);
		}, 1000);
		
		setTimeout(() => {
			details.textContent = 'Analyzing security settings...';
			addLogEntry('info', `Evaluating ${assessment} security posture`);
		}, 2000);
		
		setTimeout(() => {
			// Complete assessment
			item.className = 'progress-item completed';
			icon.innerHTML = '‚úì';
			details.textContent = 'Assessment completed successfully';
			addLogEntry('success', `${assessment} assessment completed`);
			
			// Update overall progress
			const completedCount = document.querySelectorAll('.progress-item.completed').length;
			const totalCount = parseInt(document.getElementById('total-steps').textContent);
			const progress = Math.round((completedCount / totalCount) * 100);
			
			updateOverallStatus('Assessment in Progress', `Completed ${completedCount} of ${totalCount} assessments`, progress);
			document.getElementById('current-step').textContent = completedCount.toString();
			
			callback();
		}, 3000);
	}

	function completeAssessment() {
		updateOverallStatus('Assessment Complete', 'All security checks have been completed successfully', 100);
		document.getElementById('overall-icon').className = 'status-icon success';
		document.getElementById('overall-icon').innerHTML = '‚úì';
		
		addLogEntry('success', 'PowerReview assessment completed successfully');
		addLogEntry('info', 'Generating comprehensive security report...');
		
		// Show view results button
		document.getElementById('view-results').style.display = 'flex';
		
		// Hide other controls
		document.getElementById('pause-assessment').style.display = 'none';
		document.getElementById('stop-assessment').style.display = 'none';
	}

	function updateConnectionStatus(connectionId, status, text) {
		const item = document.getElementById(connectionId);
		item.className = `connection-item ${status}`;
		item.querySelector('.status-text').textContent = text;
	}

	function updateOverallStatus(title, description, progress) {
		document.getElementById('overall-status').textContent = title;
		document.getElementById('overall-progress').textContent = description;
		document.getElementById('progress-fill').style.width = `${progress}%`;
	}

	function addLogEntry(level, message) {
		if (logPaused) return;
		
		const container = document.getElementById('log-container');
		const timestamp = formatTimestamp(Date.now() - startTime);
		
		const entry = document.createElement('div');
		entry.className = 'log-entry';
		entry.innerHTML = `
			<span class="timestamp">[${timestamp}]</span>
			<span class="level ${level}">[${level.toUpperCase()}]</span>
			<span class="message">${message}</span>
		`;
		
		container.appendChild(entry);
		container.scrollTop = container.scrollHeight;
	}

	function formatTimestamp(ms) {
		const seconds = Math.floor(ms / 1000);
		const minutes = Math.floor(seconds / 60);
		const hours = Math.floor(minutes / 60);
		
		return `${hours.toString().padStart(2, '0')}:${(minutes % 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;
	}

	function setupEventListeners() {
		document.getElementById('pause-log').addEventListener('click', () => {
			logPaused = !logPaused;
			const btn = document.getElementById('pause-log');
			btn.textContent = logPaused ? '‚ñ∂Ô∏è Resume' : '‚è∏Ô∏è Pause';
		});

		document.getElementById('clear-log').addEventListener('click', () => {
			const container = document.getElementById('log-container');
			container.innerHTML = '';
			addLogEntry('system', 'Log cleared by user');
		});

		document.getElementById('download-log').addEventListener('click', () => {
			const container = document.getElementById('log-container');
			const logText = Array.from(container.children)
				.map(entry => entry.textContent)
				.join('\n');
			
			const blob = new Blob([logText], { type: 'text/plain' });
			const url = URL.createObjectURL(blob);
			const a = document.createElement('a');
			a.href = url;
			a.download = `powerreview-log-${new Date().toISOString().split('T')[0]}.txt`;
			a.click();
			URL.revokeObjectURL(url);
		});

		document.getElementById('pause-assessment').addEventListener('click', () => {
			addLogEntry('warning', 'Assessment paused by user');
			// Implement pause logic
		});

		document.getElementById('stop-assessment').addEventListener('click', () => {
			if (confirm('Are you sure you want to stop the assessment? This will cancel all remaining checks.')) {
				addLogEntry('warning', 'Assessment stopped by user');
				window.location.href = '/assessment-select';
			}
		});

		document.getElementById('view-results').addEventListener('click', () => {
			window.location.href = '/results';
		});
	}
</script>